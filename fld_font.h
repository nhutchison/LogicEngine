////////////////////////////////
///////////////////////////////
//   Scrolling Text Stuff   //
/////////////////////////////
////////////////////////////

const long scrollDelay = 75;   // adjust scrolling speed
unsigned long bufferLong [3][10] = {0};

#define MAXSTRINGSIZE 64 // maximim letters in a ligic display message
char logicText[3][MAXSTRINGSIZE];

// This is more challenging to see the characters, but way more efficient in terms of code space.
const unsigned char font5x5 [] PROGMEM = {      //Numeric Font Matrix (Arranged as 5x font data + 1x kerning data)
    B00000000, B00000000, B00000000, B00000000, B00000000,  //Space (Char 0x20)
    5,// sets the space between letters 
    B01000000, B01000000, B01000000, B00000000, B01000000, 3, //!x
    B10100000, B10100000, B00000000, B00000000, B00000000, 4, //"x
    B01010000, B11111000, B01010000, B11111000, B01010000, 6, //#x
    B01111000, B10100000, B01110000, B00101000, B11110000, 6, //$x
    B10001000, B00010000, B00100000, B01000000, B10001000, 6, //%x
    B01100000, 
    B10010000, 
    B01100000, 
    B10010000, 
    B01101000, 6, //&
    B10000000, B10000000, B00000000, B00000000, B00000000, 2, //'x
    B01000000, B10000000, B10000000, B10000000, B01000000, 3, //(x
    B10000000, B01000000, B01000000, B01000000, B10000000, 3, //)x
    B10000000, B00000000, B00000000, B00000000, B00000000, 2, //*x
    B00000000, B01000000, B11100000, B01000000, B00000000, 4, //+x
    B00000000, B00000000, B00000000, B01000000, B10000000, 3, //,x
    B00000000, B00000000, B11100000, B00000000, B00000000, 4, //-x
    B00000000, B00000000, B00000000, B11000000, B11000000, 3, //.x
    B00001000, B00010000, B00100000, B01000000, B10000000, 6, ///x
    B01100000, 
    B10010000, 
    B10110000, 
    B11010000, 
    B01100000, 5, //0
    B01000000, B11000000, B01000000, B01000000, B11100000, 4, //1x
    B11100000, B00010000, B01100000, B10000000, B11110000, 5, //2x
    B11100000, B00010000, B11100000, B00010000, B11100000, 5, //3x
    B01100000, B10100000, B11110000, B00100000, B00100000, 5, //4
    B11110000, B10000000, B11100000, B00010000, B11100000, 5, //5x
    B01100000, B10000000, B11100000, B10010000, B01100000, 5, //6x
    B11110000, B00010000, B00100000, B01000000, B10000000, 5, //7x
    B01100000, B10010000, B01100000, B10010000, B01100000, 5, //8x
    B01100000, B10010000, B01110000, B00010000, B01100000, 5, //9x
    B00000000, B10000000, B00000000, B10000000, B00000000, 2, //:x
    B00000000, B01000000, B00000000, B01000000, B10000000, 3, //;x
    B00100000, B01000000, B10000000, B01000000, B00100000, 4, //<x
    B00000000, B11100000, B00000000, B11100000, B00000000, 4, //=x
    B10000000, B01000000, B00100000, B01000000, B10000000, 4, //>x
    B01100000, B00010000, B01100000, B00000000, B01000000, 5, //?x
    B01110000, 
    B10101000, 
    B11110000, 
    B10000000, 
    B01111000, 6, //@
    B01100000, B10010000, B11110000, B10010000, B10010000, 5, //Ax
    B11100000, B10010000, B11100000, B10010000, B11100000, 5, //Bx    
    B01100000, B10010000, B10000000, B10010000, B01100000, 5, //Cx
    B11100000, B10010000, B10010000, B10010000, B11100000, 5, //Dx
    B11110000, B10000000, B11100000, B10000000, B11110000, 5, //Ex
    B11110000, B10000000, B11100000, B10000000, B10000000, 5, //Fx
    B01110000, B10000000, B10110000, B10010000, B01100000, 5, //Gx
    B10010000, B10010000, B11110000, B10010000, B10010000, 5, //Hx
    B11100000, B01000000, B01000000, B01000000, B11100000, 4, //Ix
    B00010000, 
    B00010000, 
    B00010000, 
    B10010000, 
    B01100000, 5, //J
    B10010000, B10100000, B11000000, B10100000, B10010000, 5, //Kx
    B10000000, B10000000, B10000000, B10000000, B11100000, 4, //Lx
    B10001000, B11011000, B10101000, B10001000, B10001000, 6, //Mx
    B10001000, B11001000, B10101000, B10011000, B10001000, 6, //Nx
    B01100000, B10010000, B10010000, B10010000, B01100000, 5, //Ox
    B11100000, B10010000, B11100000, B10000000, B10000000, 5, //Px
    B01100000, B10010000, B10110000, B10010000, B01101000, 6, //Qx
    B11100000, B10010000, B11100000, B10100000, B10010000, 5, //Rx
    B01110000, B10000000, B01100000, B00010000, B11100000, 5, //Sx
    B11100000, B01000000, B01000000, B01000000, B01000000, 4, //Tx
    B10010000, B10010000, B10010000, B10010000, B01100000, 5, //Ux
    B10001000, B10001000, B10001000, B01010000, B00100000, 6, //Vx
    B10001000, B10001000, B10101000, B11011000, B10001000, 6, //Wx
    B10010000, B10010000, B01100000, B10010000, B10010000, 5, //Xx
    B10100000, B10100000, B01000000, B01000000, B01000000, 4, //Yx
    B11110000, B00100000, B01000000, B10000000, B11110000, 5, //Zx
    B11100000, B10000000, B10000000, B10000000, B11100000, 4, //[x
    B10000000, B01000000, B00100000, B00010000, B00001000, 6, //(Backward Slash)x
    B11100000, B00100000, B00100000, B00100000, B11100000, 4, //]x
    B00100000, B01010000, B00000000, B00000000, B00000000, 5, //^x
    B00000000, B00000000, B00000000, B00000000, B11110000, 5, //_x
    B10000000, B01000000, B00000000, B00000000, B00000000, 3, //`x
    B01100000, B00010000, B01110000, B10010000, B01100000, 5, //ax
    B10000000, B10000000, B11100000, B10010000, B11100000, 5, //bx
    B00000000, B00000000, B01100000, B10000000, B01100000, 4, //cx
    B00010000, B00010000, B01110000, B10010000, B01110000, 5, //dx
    B01100000, B10010000, B11100000, B10000000, B01110000, 6, //ex
    B01100000, B10000000, B11000000, B10000000, B10000000, 3, //fx
    B01100000, B10010000, B01110000, B00010000, B01100000, 6, //gx
    B10000000, B10000000, B11100000, B10010000, B10010000, 5, //hx
    B00000000, B10000000, B00000000, B10000000, B10000000, 2, //ix
    B01000000, B00000000, B01000000, B01000000, B10000000, 3, //jx
    B10000000, B10000000, B10100000, B11000000, B10100000, 5, //kx
    B10000000, B10000000, B10000000, B10000000, B01000000, 4, //lx
    B00000000, B00000000, B01010000, B10101000, B10101000, 6, //mx
    B00000000, B00000000, B01000000, B10100000, B10100000, 4, //nx
    B00000000, B00000000, B01100000, B10010000, B01100000, 5, //ox
    B00000000, B11100000, B10010000, B11100000, B10000000, 5, //px
    B00000000, B01110000, B10010000, B01110000, B00010000, 5, //qx
    B00000000, B10110000, B11000000, B10000000, B10000000, 5, //rx
    B01100000, B10000000, B11000000, B00100000, B11000000, 4, //sx
    B10000000, B11000000, B10000000, B10000000, B01000000, 3, //tx
    B00000000, B00000000, B10010000, B10010000, B01100000, 5, //ux
    B00000000, B00000000, B10001000, B01010000, B00100000, 6, //vx
    B00000000, B00000000, B10001000, B10101000, B01010000, 6, //wx
    B00000000, B00000000, B10100000, B01000000, B10100000, 4, //xx
    B00000000, B01010000, B01010000, B00100000, B11000000, 5, //yx
    B00000000, B11110000, B00100000, B01000000, B11110000, 5, //zx
    B01100000, B01000000, B11000000, B01000000, B01100000, 4, //{x
    B10000000, B10000000, B10000000, B10000000, B10000000, 2, //|x
    B11000000, B01000000, B01100000, B01000000, B11000000, 4, //}x
    B00000000, B00000000, B01101000, B10110000, B00000000, 6, //~x
    B00000000, B00000000, B00000000, B00000000, B00000000, 2, // (Char 0x7F)
    B00000000, B10010000, B00000000, B10010000, B01100000, 5 // smiley
};


// This is more challenging to see the characters, but way more efficient in terms of code space.
const unsigned char aurabesh5x7 [] PROGMEM = {      //Numeric Font Matrix for Aurabesh, created by TheJugg1er (Arranged as 7x font data + 1x kerning data)
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 3, //Space (Char 0x20)
    B00000000, B01000000, B10000000, B01000000, B10000000, B00000000, B00000000, 3, //! x
    B00000000, B10100000, B11000000, B10000000, B00000000, B00000000, B00000000, 4, //" x
    B01010000, B01010000, B11111000, B01010000, B11111000, B01010000, B01010000, 6, //#
    B00000000, B01010000, B11111110, B01010100, B00001000, B00010000, B00000000, 7, //$ x
    B11000000, B11001000, B00010000, B00100000, B01000000, B10011000, B00011000, 6, //%
    B01100000, B10010000, B10100000, B01000000, B10101000, B10010000, B01101000, 6, //&
    B00000000, B11000000, B01000000, B01000000, B00000000, B00000000, B00000000, 3, //' x
    B00000000, B01000000, B01000000, B11000000, B01000000, B01000000, B00000000, 3, //( x
    B00000000, B10000000, B10000000, B11000000, B10000000, B10000000, B00000000, 3, //) x
    B00000000, B00100000, B10101000, B01110000, B10101000, B00100000, B00000000, 6, //*
    B00000000, B00100000, B00100000, B11111000, B00100000, B00100000, B00000000, 6, //+
    B00000000, B00000000, B00000000, B00000000, B01000000, B01000000, B01000000, 3, //, x
    B00000000, B01100000, B00000000, B00000000, B00000000, B00000000, B00000000, 4, //- x
    B00000000, B00000000, B00000000, B00000000, B10100000, B10100000, B10100000, 4, //. x 
    B00000000, B01000000, B01000000, B10000000, B10000000, B00000000, B00000000, 3, /// x
    B01110000, B10001000, B10011000, B10101000, B11001000, B10001000, B01110000, 6, //0
    B01000000, B11000000, B01000000, B01000000, B01000000, B01000000, B11100000, 4, //1
    B01110000, B10001000, B00001000, B00010000, B00100000, B01000000, B11111000, 6, //2
    B11111000, B00010000, B00100000, B00010000, B00001000, B10001000, B01110000, 6, //3
    B00010000, B00110000, B01010000, B10010000, B11111000, B00010000, B00010000, 6, //4
    B11111000, B10000000, B11110000, B00001000, B00001000, B10001000, B01110000, 6, //5
    B00110000, B01000000, B10000000, B11110000, B10001000, B10001000, B01110000, 6, //6
    B11111000, B10001000, B00001000, B00010000, B00100000, B00100000, B00100000, 6, //7
    B01110000, B10001000, B10001000, B01110000, B10001000, B10001000, B01110000, 6, //8
    B01110000, B10001000, B10001000, B01111000, B00001000, B00010000, B01100000, 6, //9
    B00000000, B00000000, B10000000, B01000000, B11100000, B00000000, B00000000, 4, //: x
    B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000, 3, //; x
    B00010000, B00100000, B01000000, B10000000, B01000000, B00100000, B00010000, 5, //< 
    B00000000, B00000000, B11111000, B00000000, B11111000, B00000000, B00000000, 6, //=
    B10000000, B01000000, B00100000, B00010000, B00100000, B01000000, B10000000, 5, //>
    B00000000, B11000000, B10100000, B00100000, B00100000, B01000000, B00000000, 5, //?
    B01110000, B10001000, B00001000, B01101000, B10101000, B10101000, B01110000, 6, //@
    B00000000, B10000110, B11111000, B00000000, B11111000, B10000110, B00000000, 7, //A x
    B00000000, B01111100, B10000010, B00111000, B10000010, B01111100, B00000000, 7, //B x
    B00000000, B01000000, B01000000, B01010100, B01010100, B00000100, B00000100, 7, //C x
    B00000000, B11111110, B00000100, B01111000, B00010000, B00100000, B01000000, 7, //D x
    B00000000, B10001110, B10001100, B01010100, B01010100, B00100100, B00100100, 7, //E
    B00000000, B00000000, B00010010, B11111100, B10010000, B11111110, B00000000, 7, //F x?
    B00000000, B10111110, B10100010, B10000100, B10000100, B10001000, B11110000, 7, //G x
    B00000000, B01111110, B00000000, B00111100, B00000000, B01111110, B00000000, 7, //H x
    B00000000, B00100000, B01100000, B00100000, B00100000, B00100000, B00000000, 4, //I x
    B00000000, B00000010, B00001100, B11111000, B00010000, B11100000, B00000000, 7, //J x
    B00000000, B00000000, B11111100, B00000100, B00000100, B11111100, B00000000, 7, //K x
    B00000000, B00010000, B00010000, B10010000, B01010000, B00110000, B00000000, 7, //L x
    B00000000, B00000000, B00011100, B00100000, B01000000, B01111100, B00000000, 7, //M x
    B00000000, B01001000, B10001000, B10010100, B10100001, B01000001, B00000000, 7, //N - Just not happy!
    B00000000, B00111000, B01000100, B10000010, B10000010, B01111100, B00000000, 7, //O x
    B00000000, B01101000, B10001000, B10001000, B10001000, B01111000, B00000000, 7, //P x ok
    B00000000, B00000000, B01111100, B01000100, B01000000, B01110000, B00000000, 7, //Q x ok
    B00000000, B11111110, B00000100, B00001000, B00010000, B00100000, B01000000, 7, //R x too big?
    B00000000, B10000100, B01000100, B00100100, B00010100, B10001100, B01100100, 7, //S x not great
    B00000000, B00010000, B00010000, B01010100, B00111000, B00010000, B00000000, 7, //T x
    B00000000, B10011100, B10100100, B10000100, B10000100, B11111100, B00000000, 7, //U x
    B00000000, B01000100, B00101000, B00010000, B00010000, B00010000, B00000000, 7, //V x
    B00000000, B00000000, B01111110, B01000010, B01000010, B01111110, B00000000, 7, //W x
    B00000000, B00000000, B00010000, B00101000, B01000100, B00111000, B00000000, 7, //X x
    B00000000, B11100010, B10100010, B01000100, B00101000, B00010000, B00000000, 7, //Y x
    B00000000, B00000100, B00011100, B00100100, B10000100, B11111100, B00000000, 7, //Z x
    B11100000, B10000000, B10000000, B10000000, B10000000, B10000000, B11100000, 4, //[
    B00000000, B10000000, B01000000, B00100000, B00010000, B00001000, B00000000, 6, //(Backward Slash)
    B11100000, B00100000, B00100000, B00100000, B00100000, B00100000, B11100000, 4, //]
    B00100000, B01010000, B10001000, B00000000, B00000000, B00000000, B00000000, 6, //^
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, 6, //_
    B00000000, B11000000, B10000000, B10000000, B00000000, B00000000, B00000000, 3, //` x
    B00000000, B00000000, B01110000, B00001000, B01111000, B10001000, B01111000, 6, //a
    B10000000, B10000000, B10110000, B11001000, B10001000, B10001000, B11110000, 6, //b
    B00000000, B00000000, B01110000, B10001000, B10000000, B10001000, B01110000, 6, //c
    B00001000, B00001000, B01101000, B10011000, B10001000, B10001000, B01111000, 6, //d
    B00000000, B00000000, B01110000, B10001000, B11111000, B10000000, B01110000, 6, //e
    B00110000, B01001000, B01000000, B11100000, B01000000, B01000000, B01000000, 6, //f
    B00000000, B01111000, B10001000, B10001000, B01111000, B00001000, B01110000, 6, //g
    B10000000, B10000000, B10110000, B11001000, B10001000, B10001000, B10001000, 6, //h
    B01000000, B00000000, B11000000, B01000000, B01000000, B01000000, B11100000, 4, //i
    B00010000, B00000000, B00110000, B00010000, B00010000, B10010000, B01100000, 5, //j
    B10000000, B10000000, B10010000, B10100000, B11000000, B10100000, B10010000, 5, //k
    B11000000, B01000000, B01000000, B01000000, B01000000, B01000000, B11100000, 4, //l
    B00000000, B00000000, B11010000, B10101000, B10101000, B10001000, B10001000, 6, //m
    B00000000, B00000000, B10110000, B11001000, B10001000, B10001000, B10001000, 6, //n
    B00000000, B00000000, B01110000, B10001000, B10001000, B10001000, B01110000, 6, //o
    B00000000, B00000000, B11110000, B10001000, B11110000, B10000000, B10000000, 6, //p
    B00000000, B00000000, B01101000, B10011000, B01111000, B00001000, B00001000, 6, //q
    B00000000, B00000000, B10110000, B11001000, B10000000, B10000000, B10000000, 6, //r
    B00000000, B00000000, B01110000, B10000000, B01110000, B00001000, B11110000, 6, //s
    B01000000, B01000000, B11100000, B01000000, B01000000, B01001000, B00110000, 6, //t
    B00000000, B00000000, B10001000, B10001000, B10001000, B10011000, B01101000, 6, //u
    B00000000, B00000000, B10001000, B10001000, B10001000, B01010000, B00100000, 6, //v
    B00000000, B00000000, B10001000, B10101000, B10101000, B10101000, B01010000, 6, //w
    B00000000, B00000000, B10001000, B01010000, B00100000, B01010000, B10001000, 6, //x
    B00000000, B00000000, B10001000, B10001000, B01111000, B00001000, B01110000, 6, //y 
    B00000000, B00000000, B11111000, B00010000, B00100000, B01000000, B11111000, 6, //z
    B00100000, B01000000, B01000000, B10000000, B01000000, B01000000, B00100000, 4, //{ 
    B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, 2, //| 
    B10000000, B01000000, B01000000, B00100000, B01000000, B01000000, B10000000, 4, //}
    B00000000, B00000000, B00000000, B01101000, B10010000, B00000000, B00000000, 6, //~
    B01100000, B10010000, B10010000, B01100000, B00000000, B00000000, B00000000, 5, // (Char 0x7F)
    B00000000, B01100000, B01100110, B00000000, B10000001, B01100110, B00011000, 5 // smiley
};
